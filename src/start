builtins.c:	argv = exec_in->argv;
cmd_not_found.c:	if (!cmd_path || exec_in->open_fd == -2)
cmd_not_found.c:		if (exec_in->tmp_fd != -1)
cmd_not_found.c:			close(exec_in->tmp_fd);
cmd_not_found.c:		if (!exec_in->end)
cmd_not_found.c:			exec_in->tmp_fd = pipe_fd[0];
cmd_not_found.c:		if (errno != 13 && exec_in->open_fd != -2 && !cmd_path
cmd_not_found.c:			print_error(exec_in->argv[0], 2);
exec.c:	while (exec_in->argv[i])
exec.c:		exec_in->argv[i] = handle_quote(exec_in->argv[i]);
exec.c:	cmd_path = check_cmd(exec_in->argv, env);
exec.c:	if (!cmd_path || exec_in->open_fd == -2)
exec.c:		if (errno != 13 && exec_in->open_fd != -2 && !cmd_path
exec.c:			print_error(exec_in->argv[0], 2);
exec.c:	if (exec_in->open_fd != -1 && exec_in->open_fd != -2)
exec.c:		close(exec_in->open_fd);
exec.c:	if (exec_in->out_fd != -1 && exec_in->out_fd != -2)
exec.c:		close(exec_in->out_fd);
exec.c:	exec_in->turn++;
exec.c:			exec_in->start = TRUE;
exec.c:			exec_in->start = FALSE;
exec.c:			exec_in->end = TRUE;
exec.c:		exec_in->argv = get_cmd_arg(leaf->left->content);
exec.c:		exec_in->argv = get_cmd_arg(leaf->content);
exec.c:	if (!exec_in->end)
exec.c:		exec_in->tmp_fd = pipe_fd[0];
exec.c:	if (exec_in->open_fd != -1 && exec_in->open_fd != -2)
exec.c:		close(exec_in->open_fd);
exec.c:	if (exec_in->out_fd != -1 && exec_in->out_fd != -2)
exec.c:		close(exec_in->out_fd);
exec.c:	exec_in->turn++;
exec.c:	while (exec_in->argv[++i])
exec.c:		exec_in->argv[i] = handle_quote(exec_in->argv[i]);
exec.c:	cmd_path = check_cmd(exec_in->argv, env);
exec.c:		if (exec_in->end)
exec.c:			exec_in->cmd_not_found = TRUE;
exec.c:		if (exec_in->open_fd != -1 && exec_in->open_fd != -2)
exec.c:			close(exec_in->open_fd);
exec.c:		if (exec_in->out_fd != -1 && exec_in->out_fd != -2)
exec.c:			close(exec_in->out_fd);
exec_subprocess.c:	if (exec_in->open_fd != -1 && exec_in->open_fd != -2)
exec_subprocess.c:		if (dup2(exec_in->open_fd, STDIN_FILENO) == -1)
exec_subprocess.c:	if (exec_in->out_fd != -1 && exec_in->out_fd != -2)
exec_subprocess.c:		if (dup2(exec_in->out_fd, STDOUT_FILENO) == -1)
exec_subprocess.c:	if (exec_in->out_fd != -1 && exec_in->out_fd != -2)
exec_subprocess.c:		if (dup2(exec_in->out_fd, STDOUT_FILENO) == -1)
exec_subprocess.c:	else if (!exec_in->end)
exec_subprocess.c:		if (exec_in->out_fd == -1)
exec_subprocess.c:			if (dup2(exec_in->stdou, STDOUT_FILENO) == -1)
exec_subprocess.c:			if (exec_in->stdou != -1)
exec_subprocess.c:				close(exec_in->stdou);
exec_subprocess.c:			exec_in->stdou = -1;
exec_subprocess.c:	if (exec_in->open_fd != -1 && exec_in->open_fd != -2)
exec_subprocess.c:		if (dup2(exec_in->open_fd, STDIN_FILENO) == -1)
exec_subprocess.c:	else if (exec_in->tmp_fd != -1 && !exec_in->start)
exec_subprocess.c:		if (dup2(exec_in->tmp_fd, STDIN_FILENO) == -1)
exec_subprocess.c:	if (exec_in->stdi != -1)
exec_subprocess.c:		close(exec_in->stdi);
exec_subprocess.c:	if (exec_in->stdou != -1)
exec_subprocess.c:		close(exec_in->stdou);
exec_subprocess.c:	if (exec_in->open_fd != -1 && exec_in->open_fd != -2)
exec_subprocess.c:		close(exec_in->open_fd);
exec_subprocess.c:	if (exec_in->out_fd != -1 && exec_in->out_fd != -2)
exec_subprocess.c:		close(exec_in->out_fd);
exec_subprocess.c:	if (exec_in->tmp_fd != -1)
exec_subprocess.c:		close(exec_in->tmp_fd);
execve.c:	ac = get_ac(exec_in->argv);
execve.c:		exec_cd(ac, exec_in->argv, env);
execve.c:		exec_export(ac, exec_in->argv, env);
execve.c:		exec_unset(ac, exec_in->argv, env);
execve.c:		exec_pwd(ac, exec_in->argv, env);
execve.c:		exec_env(ac, exec_in->argv, env);
execve.c:		exec_echo(ac, exec_in->argv, env);
forking.c:	if (exec_in->pid[exec_in->turn] == 0)
forking.c:			perror(exec_in->argv[0]);
forking.c:	exec_in->pid[exec_in->turn] = fork();
forking.c:	if (exec_in->pid[exec_in->turn] < 0)
forking.c:	if (exec_in->end)
forking.c:	if (exec_in->tmp_fd != -1)
forking.c:		close(exec_in->tmp_fd);
forking.c:	exec_in->tmp_fd = pipe_fd[0];
forking.c:	if (exec_in->pid[exec_in->turn] < 0)
forking.c:	else if (exec_in->pid[exec_in->turn] == 0)
forking.c:		if (exec_in->open_fd != -1 && exec_in->open_fd != -2)
forking.c:			close(exec_in->open_fd);
forking.c:		if (exec_in->out_fd != -1 && exec_in->out_fd != -2)
forking.c:			close(exec_in->out_fd);
forking.c:			perror(exec_in->argv[0]);
forking.c:	if (!check_builtins(exec_in->argv))
forking.c:		exec_in->pid[exec_in->turn] = fork();
lexing_parsing.c:		if (exec_in->stdou != -1)
lexing_parsing.c:			close(exec_in->stdou);
lexing_parsing.c:		close(exec_in->stdi);
lexing_parsing.c:	exec_in->fd_arr_size = total_block(tree->head);
lexing_parsing.c:	exec_in->fd_arr = malloc(sizeof(int) * exec_in->fd_arr_size);
lexing_parsing.c:	if (!exec_in->fd_arr)
redir_ambiguous.c:		exec_in->out_fd = -2;
redir_ambiguous.c:		exec_in->open_fd = -2;
