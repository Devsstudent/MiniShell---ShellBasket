exec.c:	while (exec_in->argv[i])
exec.c:		exec_in->argv[i] = handle_quote(exec_in->argv[i]);
exec.c:	cmd_path = check_cmd(exec_in->argv, env);
exec.c:	if (!cmd_path|| exec_in->open_fd == -2)
exec.c:		if (exec_in->open_fd != -2 && !cmd_path)
exec.c:			print_error(exec_in->argv[0], 2);
exec.c:	if (exec_in->open_fd != -1)
exec.c:		close(exec_in->open_fd);
exec.c:	if (exec_in->out_fd != -1)
exec.c:		close(exec_in->out_fd);
exec.c:	exec_in->turn++;
exec.c:			exec_in->start = TRUE;
exec.c:			exec_in->start = FALSE;
exec.c:			exec_in->end = TRUE;
exec.c:		exec_in->argv = get_cmd_arg(leaf->left->content);
exec.c:		exec_in->argv = get_cmd_arg(leaf->content);
exec.c:	cmd_path = check_cmd(exec_in->argv, env);
exec.c:	while (exec_in->argv[++i])
exec.c:		exec_in->argv[i] = handle_quote(exec_in->argv[i]);
exec.c:	if (!cmd_path || exec_in->open_fd == -2)
exec.c:		exec_in->tmp_fd = pipe_fd[0];
exec.c:		if (exec_in->open_fd != -2 && !cmd_path)
exec.c:			print_error(exec_in->argv[0], 2);
exec.c:	//if (exec_in->tmp_fd != -1)
exec.c:	//	close(exec_in->tmp_fd);
exec.c:	exec_in->tmp_fd = pipe_fd[0];
exec.c:	if (exec_in->open_fd != -1)
exec.c:		close(exec_in->open_fd);
exec.c:	if (exec_in->out_fd != -1)
exec.c:		close(exec_in->out_fd);
exec.c:	exec_in->turn++;
execve.c:	ac = get_ac(exec_in->argv);
execve.c:		exec_exit(ac, exec_in->argv, env, 1);
execve.c:		exec_cd(ac, exec_in->argv, env);
execve.c:		exec_export(ac, exec_in->argv, env);
execve.c:		exec_unset(ac, exec_in->argv, env);
execve.c:		exec_pwd(ac, exec_in->argv, env);
execve.c:		exec_env(ac, exec_in->argv, env);
execve.c:		exec_echo(ac, exec_in->argv, env);
exec_subprocess.c:	if (exec_in->open_fd != -1 && exec_in->open_fd != -2)
exec_subprocess.c:		if (dup2(exec_in->open_fd, STDIN_FILENO) == -1)
exec_subprocess.c:	if (exec_in->out_fd != -1 && exec_in->out_fd != -2)
exec_subprocess.c:		if (dup2(exec_in->out_fd, STDOUT_FILENO) == -1)
exec_subprocess.c:	if (exec_in->out_fd == -2)
exec_subprocess.c:	if (exec_in->open_fd == -2)
exec_subprocess.c:	exec_in->pid[exec_in->turn] = fork();
exec_subprocess.c:	if (exec_in->pid[exec_in->turn] < 0)
exec_subprocess.c:	else  if (exec_in->pid[exec_in->turn] == 0)
exec_subprocess.c:		if (exec_in->open_fd != -1)
exec_subprocess.c:			close(exec_in->open_fd);
exec_subprocess.c:		if (exec_in->out_fd != -1)
exec_subprocess.c:			close(exec_in->out_fd);
exec_subprocess.c:		if (!execve_test(cmd_path, exec_in->argv, env, 1))
exec_subprocess.c:			perror(exec_in->argv[0]);
exec_subprocess.c:	if (exec_in->out_fd != -1 && exec_in->out_fd != -2)
exec_subprocess.c:		if (dup2(exec_in->out_fd, STDOUT_FILENO) == -1)
exec_subprocess.c:	else if (!exec_in->end)
exec_subprocess.c:		if (exec_in->out_fd != -2)
exec_subprocess.c:			if (dup2(exec_in->stdou, STDOUT_FILENO) == -1)
exec_subprocess.c:			close(exec_in->stdou);
exec_subprocess.c:			exec_in->stdou = -1;
exec_subprocess.c:	if (exec_in->open_fd != -1 && exec_in->open_fd != -2)
exec_subprocess.c:		if (dup2(exec_in->open_fd, STDIN_FILENO) == -1)
exec_subprocess.c:	else if (exec_in->tmp_fd != -1 && !exec_in->start)
exec_subprocess.c:		if (dup2(exec_in->tmp_fd, STDIN_FILENO) == -1)
exec_subprocess.c:	exec_in->pid[exec_in->turn] = fork();
exec_subprocess.c:	if (exec_in->pid[exec_in->turn] < 0)
exec_subprocess.c:	if (exec_in->end)
exec_subprocess.c:	else if (exec_in->open_fd == -2)
exec_subprocess.c:	if (exec_in->pid[exec_in->turn] == 0)
exec_subprocess.c:		if (exec_in->open_fd != -1 && exec_in->open_fd != -2)
exec_subprocess.c:			close(exec_in->open_fd);
exec_subprocess.c:		if (exec_in->out_fd != -1 && exec_in->out_fd != -2)
exec_subprocess.c:			close(exec_in->out_fd);
exec_subprocess.c:		if (exec_in->tmp_fd != -1)
exec_subprocess.c:			close(exec_in->tmp_fd);
exec_subprocess.c:		if (!execve_test(cmd_path, exec_in->argv, env, 1))
exec_subprocess.c:			perror(exec_in->argv[0]);
exec_subprocess.c:	if (exec_in->tmp_fd != -1)
exec_subprocess.c:		close(exec_in->tmp_fd);
exec_subprocess.c:	exec_in->tmp_fd = pipe_fd[0];
main.c:	exec_in->fd_arr_size = total_block(tree->head);
main.c:	exec_in->fd_arr = malloc(sizeof(int) * exec_in->fd_arr);
main.c:		free_each_turn(get_gc(), exec_in->fd_arr_size);
redirection.c:		exec_in->open_fd = -2;
redirection.c:				exec_in->out_fd = -2;
redirection.c:				exec_in->open_fd = -2;
